syntax = "proto3";
package zkp_auth;

/*
 * Prover registers with the server by sending:
 * - y1 = g^x mod p
 * - y2 = h^x mod p
 * where x is the prover's secret
 */
message RegisterRequest {
    string username = 1;
    bytes public_y1 = 2; // generator_g^x mod p
    bytes public_y2 = 3; // generator_h^x mod p
}

message RegisterResponse {
  string message = 1;
}

/*
 * Prover initiates authentication by sending:
 * - commitment_t1 = g^k mod p
 * - commitment_t2 = h^k mod p
 * Verifier returns a challenge c
 */
message ChallengeRequest {
    string username = 1;
    bytes commitment_t1 = 2; // generator_g^k mod p
    bytes commitment_t2 = 3; // generator_h^k mod p
}

message ChallengeResponse {
    string auth_id = 1; // Unique identifier for authentication session
    bytes challenge_c = 2;
}

/*
 * Prover responds to the challenge with:
 * - s = (r - c * x) mod q
 * Verifier validates and returns a session ID if correct
 */
message ChallengeAnswerRequest {
    string auth_id = 1;
    bytes response_s = 2;
}

message ChallengeAnswerResponse {
    string session_id = 1;
}

service ZKPAuthService {
    rpc Register(RegisterRequest) returns (RegisterResponse);
    rpc RequestChallenge(ChallengeRequest) returns (ChallengeResponse);
    rpc SubmitChallengeAnswer(ChallengeAnswerRequest) returns (ChallengeAnswerResponse);
}